#!/usr/bin/env python3
"""
Debug script to test server restart functionality
"""

from server_utils import ServerMonitor, SSHManager
from config import SERVERS
import sys
import os
sys.path.append(os.path.dirname(__file__))


def test_server_restart():
    """Test server restart functionality with detailed diagnostics."""
    print("üîß CobaltaX Server Restart Debug Tool")
    print("=" * 50)

    if not SERVERS:
        print("‚ùå No servers configured in config.py")
        return

    ssh_manager = SSHManager()
    server_monitor = ServerMonitor()

    for i, server in enumerate(SERVERS, 1):
        print(f"\nüñ•Ô∏è  Testing Server {i}: {server['name']} ({server['ip']})")
        print("-" * 40)

        # Test basic connectivity
        print("1. Testing basic connectivity...")
        ping_result = server_monitor.ping_server(server['ip'])
        print(f"   Ping: {'‚úÖ Success' if ping_result else '‚ùå Failed'}")

        if not ping_result:
            print("   ‚ö†Ô∏è  Server unreachable - skipping SSH tests")
            continue

        # Test SSH port
        ssh_port = server.get('ssh_port', 22)
        port_result = server_monitor.check_port(server['ip'], ssh_port)
        print(
            f"   SSH Port {ssh_port}: {'‚úÖ Open' if port_result else '‚ùå Closed'}")

        if not port_result:
            print("   ‚ö†Ô∏è  SSH port closed - skipping SSH tests")
            continue

        # Test SSH connection
        print("2. Testing SSH connection...")
        client, error = ssh_manager.create_ssh_client(server)
        if client:
            print("   ‚úÖ SSH connection successful")
            client.close()
        else:
            print(f"   ‚ùå SSH connection failed: {error}")
            continue

        # Test sudo access
        print("3. Testing sudo privileges...")
        has_sudo, sudo_msg = ssh_manager.test_sudo_access(server)
        print(f"   Sudo access: {'‚úÖ' if has_sudo else '‚ùå'} {sudo_msg}")

        # Get system info
        print("4. Getting system information...")
        info_success, system_info = ssh_manager.get_system_info(server)
        if info_success:
            print("   ‚úÖ System info retrieved:")
            for line in system_info.split('\n'):
                print(f"      {line}")
        else:
            print(f"   ‚ùå Failed to get system info: {system_info}")

        # Test restart (ask for confirmation)
        if has_sudo:
            print("\n5. Restart test options:")
            print("   [y] - Test restart command (WILL RESTART THE SERVER)")
            print("   [d] - Dry run (test without actually restarting)")
            print("   [s] - Skip restart test")

            choice = input("   Choose option [y/d/s]: ").lower().strip()

            if choice == 'y':
                print("   ‚ö†Ô∏è  RESTARTING SERVER...")
                success, message = ssh_manager.restart_server(server)
                print(
                    f"   Restart result: {'‚úÖ' if success else '‚ùå'} {message}")

            elif choice == 'd':
                print("   üß™ Dry run - testing restart commands without execution...")
                client, error = ssh_manager.create_ssh_client(server)
                if client:
                    # Test each restart command availability
                    restart_commands = [
                        'which systemctl',
                        'which shutdown',
                        'which reboot',
                        'ls -la /sbin/reboot'
                    ]

                    for cmd in restart_commands:
                        try:
                            stdin, stdout, stderr = client.exec_command(
                                cmd, timeout=3)
                            exit_status = stdout.channel.recv_exit_status()
                            output = stdout.read().decode('utf-8').strip()
                            if exit_status == 0 and output:
                                print(f"      ‚úÖ {cmd}: {output}")
                            else:
                                print(f"      ‚ùå {cmd}: Not found")
                        except Exception as e:
                            print(f"      ‚ùå {cmd}: Error - {e}")

                    client.close()
                    print("   ‚úÖ Dry run completed")
                else:
                    print(f"   ‚ùå SSH connection failed for dry run: {error}")
            else:
                print("   ‚è≠Ô∏è  Skipping restart test")
        else:
            print("   ‚ö†Ô∏è  Cannot test restart - no sudo privileges")

        print(f"\n‚úÖ Server {i} testing completed")

    print("\nüèÅ All tests completed!")
    print("\nTroubleshooting tips:")
    print("‚Ä¢ Ensure SSH user has passwordless sudo access")
    print("‚Ä¢ Check firewall settings on servers")
    print("‚Ä¢ Verify SSH key authentication is working")
    print("‚Ä¢ Make sure servers support systemd or traditional shutdown commands")


if __name__ == "__main__":
    test_server_restart()
